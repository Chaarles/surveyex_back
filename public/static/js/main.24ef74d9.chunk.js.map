{"version":3,"sources":["App.js","Result.js","serviceWorker.js","index.js"],"names":["App","Component","state","gender","animal","onChangeGenderValue","bind","onChangeAnimalValue","formSubmit","event","this","setState","selectedGenderOption","target","value","selectedAnimalOption","preventDefault","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPA8EeA,GC5EMC,Y,kDDEnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,OACRC,OAAQ,SAEV,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAC3B,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBARN,E,gEAYMG,GAClBC,KAAKC,SAAS,CACZC,qBAAsBH,EAAMI,OAAOC,U,0CAGnBL,GAClBC,KAAKC,SAAS,CACZI,qBAAsBN,EAAMI,OAAOC,U,iCAI5BL,GACTA,EAAMO,iBACNC,QAAQC,IAAIR,KAAKR,MAAMU,sBACvBK,QAAQC,IAAIR,KAAKR,MAAMa,wB,uCA3BTd,cESEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAIFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.24ef74d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Result from \"./Result\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      gender: \"Male\",\r\n      animal: \"Tiger\",\r\n    };\r\n    this.onChangeGenderValue = this.onChangeGenderValue.bind(this);\r\n    this.onChangeAnimalValue = this.onChangeAnimalValue.bind(this);\r\n    this.formSubmit = this.formSubmit.bind(this);\r\n  }\r\n\r\n  //Selected Radio Button\r\n  onChangeGenderValue(event) {\r\n    this.setState({\r\n      selectedGenderOption: event.target.value,\r\n    });\r\n  }\r\n  onChangeAnimalValue(event) {\r\n    this.setState({\r\n      selectedAnimalOption: event.target.value,\r\n    });\r\n  }\r\n\r\n  formSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(this.state.selectedGenderOption);\r\n    console.log(this.state.selectedAnimalOption);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Form Grouping\r\n      <>\r\n        <h1>Club R46</h1><br/>\r\n        <h2>Today's Survey</h2><br/>\r\n        <h3>\r\n          If you're going to join our Club,\r\n          <br />\r\n          please answer a simple survey!\r\n          <br />\r\n          We'll help you to find the best matches through this survey results :)\r\n        </h3>\r\n        <br />\r\n        <form onSubmit={this.formSubmit}>\r\n          <h3>Please select your gender.</h3>\r\n          <div className=\"gender\">\r\n            <input name=\"gender\" type=\"radio\" value=\"Male\" checked={this.state.selectedGenderOption === \"Male\"} onChange={this.onChangeGenderValue} />\r\n            Male\r\n            <input name=\"gender\" type=\"radio\" value=\"Female\" checked={this.state.selectedGenderOption === \"Female\"} onChange={this.onChangeGenderValue} />\r\n            Female\r\n          </div>\r\n          Selected option is : {this.state.selectedGenderOption}\r\n          <br />\r\n        </form>\r\n\r\n        <form onSubmit={this.formSubmit}>\r\n          <h3>Please select your favorite animal.</h3>\r\n          <div className=\"animal\">\r\n            <input name=\"animal\" type=\"radio\" value=\"Tiger\" checked={this.state.selectedAnimalOption === \"Tiger\"} onChange={this.onChangeAnimalValue} />\r\n            Tiger\r\n            <input name=\"animal\" type=\"radio\" value=\"Elephant\" checked={this.state.selectedAnimalOption === \"Elephant\"} onChange={this.onChangeAnimalValue} />\r\n            Elephant\r\n          </div>\r\n          Selected option is : {this.state.selectedAnimalOption} <br />\r\n\r\n          <button onClick={onclick}>\r\n            Submit\r\n          </button>\r\n\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Result extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Result_Survey Total</h1>\r\n        {/* Gender */}\r\n        Gender\r\n        <br />\r\n        <table class=\"table table-hover table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th class=\"male\">\r\n                <span>Male</span>\r\n              </th>\r\n              <th class=\"female\">\r\n                <span>Female</span>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td class=\"maleNum\">1</td>\r\n              <td class=\"femaleNum\">2</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        {/* Animal */}\r\n        Animal\r\n        <br />\r\n        <br />\r\n        <table class=\"table table-hover table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th class=\"tiger\">\r\n                <span>Tiger</span>\r\n              </th>\r\n              <th class=\"elephant\">\r\n                <span>Elephant</span>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td class=\"tigerNum\">3</td>\r\n              <td class=\"elephantNum\">4</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <h3>Thank you for your survey!</h3>\r\n        <button>Back</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n// import Result from \"./Result\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>\r\n    {/* <Result/> */}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}