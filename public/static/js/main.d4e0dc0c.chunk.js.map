{"version":3,"sources":["components/Home.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","gender","setGender","animal","setAnimal","history","useHistory","onChangeGenderValue","event","console","log","target","value","onChangeAnimalValue","className","name","type","onChange","onClick","Axios","post","then","res","data","catch","e","get","push","Result","props","state","result","location","this","scope","mt","me","ft","fe","to","Component","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+QAmGeA,EA/FF,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACFC,EADE,OAEWF,mBAAS,IAFpB,mBAEVG,EAFU,KAEFC,EAFE,KAGXC,EAAUC,cAEhB,SAASC,EAAoBC,GAC3BC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBV,EAAUM,EAAMG,OAAOC,OAEzB,SAASC,EAAoBL,GAC3BC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBR,EAAUI,EAAMG,OAAOC,OA4BzB,OACE,oCACE,wCACA,6BACA,8CACA,6BACA,gEAEE,6BAFF,iCAIE,6BAJF,0EAOA,6BACA,0DACA,yBAAKE,UAAU,UACb,2BACEC,KAAK,SACLC,KAAK,QACLJ,MAAM,OACNK,SAAUV,IALd,OAQE,2BACEQ,KAAK,SACLC,KAAK,QACLJ,MAAM,SACNK,SAAUV,IAZd,UAdF,wBA8BwBN,EACtB,6BACA,mEACA,yBAAKa,UAAU,UACb,2BACEC,KAAK,SACLC,KAAK,QACLJ,MAAM,QACNK,SAAUJ,IALd,QAQE,2BACEE,KAAK,SACLC,KAAK,QACLJ,MAAM,WACNK,SAAUJ,IAZd,YAjCF,wBAiDwBV,EAjDxB,IAiDgC,6BAC5B,4BAAQe,QA5Ed,WACET,QAAQC,IAAIT,GACZkB,IAAMC,KAAK,UAAW,CACpBnB,OAAQA,EACRE,OAAQA,IAEPkB,MAAK,SAACC,GACLb,QAAQC,IAAIY,EAAIC,SAEjBC,OAAM,SAACC,GACNhB,QAAQC,IAAIe,MAGhBN,IAAMO,IAAI,WACPL,MAAK,SAACC,GACLb,QAAQC,IAAIY,EAAIC,MAEhB,IAAMA,EAAOD,EAAIC,KACjBlB,EAAQsB,KAAK,UAAW,CAAEJ,KAAMA,OAEjCC,OAAM,SAACC,GACNhB,QAAQC,IAAIe,QAuDZ,Y,OC3COG,E,kDA/Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,OAAQF,EAAMG,SAASF,MAAMP,MAC5Cd,QAAQC,IAAImB,EAAMG,SAASF,MAAMP,MAHhB,E,qDAMT,IACAQ,EAAWE,KAAKH,MAAhBC,OACR,OACE,6BACE,mDACA,2BAAOjB,UAAU,oBACf,+BACE,4BACE,wBAAIoB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,cAGJ,+BACE,4BACE,wBAAIA,MAAM,OAAV,QACA,4BAAKH,EAAOI,IACZ,4BAAKJ,EAAOK,KAEd,4BACE,wBAAIF,MAAM,OAAV,UACA,4BAAKH,EAAOM,IACZ,4BAAKN,EAAOO,KAEd,4BACE,wBAAIJ,MAAM,OAAV,SACA,4BAAKH,EAAOI,GAAKJ,EAAOM,IACxB,4BAAKN,EAAOK,GAAKL,EAAOO,OAK9B,0DACA,kBAAC,IAAD,CAAMC,GAAG,KACP,8C,GAzCWC,aCeNC,E,uKAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjC,kBAAC,IAAD,CAAO4C,KAAK,UAAUC,UAAWhB,U,GANzBY,aCOEK,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.d4e0dc0c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst Home = () => {\r\n  const [gender, setGender] = useState(\"\");\r\n  const [animal, setAnimal] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  function onChangeGenderValue(event) {\r\n    console.log(event.target.value);\r\n    setGender(event.target.value);\r\n  }\r\n  function onChangeAnimalValue(event) {\r\n    console.log(event.target.value);\r\n    setAnimal(event.target.value);\r\n  }\r\n\r\n  function onClickAxios() {\r\n    console.log(gender);\r\n    Axios.post(\"/submit\", {\r\n      gender: gender,\r\n      animal: animal,\r\n    })\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n\r\n    Axios.get(\"/result\")\r\n      .then((res) => {\r\n        console.log(res.data);\r\n\r\n        const data = res.data;\r\n        history.push(\"/result\", { data: data });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Club R46</h1>\r\n      <br />\r\n      <h2>Today's Survey</h2>\r\n      <br />\r\n      <h3>\r\n        If you're going to join our Club,\r\n        <br />\r\n        please answer a simple survey!\r\n        <br />\r\n        We'll help you to find the best matches through this survey results :)\r\n      </h3>\r\n      <br />\r\n      <h3>Please select your gender.</h3>\r\n      <div className=\"gender\">\r\n        <input\r\n          name=\"gender\"\r\n          type=\"radio\"\r\n          value=\"Male\"\r\n          onChange={onChangeGenderValue}\r\n        />\r\n        Male\r\n        <input\r\n          name=\"gender\"\r\n          type=\"radio\"\r\n          value=\"Female\"\r\n          onChange={onChangeGenderValue}\r\n        />\r\n        Female\r\n      </div>\r\n      Selected option is : {gender}\r\n      <br />\r\n      <h3>Please select your favorite animal.</h3>\r\n      <div className=\"animal\">\r\n        <input\r\n          name=\"animal\"\r\n          type=\"radio\"\r\n          value=\"Tiger\"\r\n          onChange={onChangeAnimalValue}\r\n        />\r\n        Tiger\r\n        <input\r\n          name=\"animal\"\r\n          type=\"radio\"\r\n          value=\"Elephant\"\r\n          onChange={onChangeAnimalValue}\r\n        />\r\n        Elephant\r\n      </div>\r\n      Selected option is : {animal} <br />\r\n        <button onClick={onClickAxios}>Submit</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Result extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { result: props.location.state.data };\r\n    console.log(props.location.state.data);\r\n  }\r\n\r\n  render() {\r\n    const { result } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Result_Survey Total</h1>\r\n        <table className=\"table table-dark\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Sorts</th>\r\n              <th scope=\"col\">Tiger</th>\r\n              <th scope=\"col\">Elephant</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <th scope=\"row\">Male</th>\r\n              <td>{result.mt}</td>\r\n              <td>{result.me}</td>\r\n            </tr>\r\n            <tr>\r\n              <th scope=\"row\">Female</th>\r\n              <td>{result.ft}</td>\r\n              <td>{result.fe}</td>\r\n            </tr>\r\n            <tr>\r\n              <th scope=\"row\">Total</th>\r\n              <td>{result.mt + result.ft}</td>\r\n              <td>{result.me + result.fe}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <h3>Thank you for your survey!</h3>\r\n        <Link to=\"/\">\r\n          <button>Back</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport Home from \"./components/Home\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Result from \"./components/Result\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home}></Route>\r\n          <Route path=\"/result\" component={Result}></Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}